{
	"usePage": {
		"prefix": ["usePage","up"],
		"body": [
			"const page = usePage();"
		],
		"description": "use hook usePage function"
	},
	"useTranslation": {
		"prefix": ["useTranslation","ut"],
		"body": [
			"const {t} = useTranslation();"
		],
		"description": "useTranslation function"
	},
	"useLoading": {
		"prefix": ["useLoading","ul"],
		"body": [
			"const { setIsLoading, setAlert } = useLoading();"
		],
		"description": "use hook useLoading function"
	},
	"useLoading Loading": {
		"prefix": ["ull"],
		"body": [
			"const { setIsLoading } = useLoading();"
		],
		"description": "use hook useLoading function"
	},
	"useLoading Alert": {
		"prefix": ["ula"],
		"body": [
			"const { setAlert } = useLoading();"
		],
		"description": "use hook useLoading function"
	},
	"useRouter": {
		"prefix": ["useRouter","urt"],
		"body": [
			"const router = useRouter();"
		],
		"description": "next/navigation useRouter hook function "
	},
	"useSearchParams": {
		"prefix": ["useSearchParams","usp"],
		"body": [
			"const {$id} = useSearchParams();"
		],
		"description": "use hook useParams function"
	},
	"useSearchParams Get": {
		"prefix": ["useSearchParams","usp" ,"uspg"],
		"body": [
			"const searchParams = useSearchParams();",
			"const $id = searchParams.get('$id'),"
		],
		"description": "use hook useParams function"
	},
	"useState submitted": {
		"prefix": ["uss"],
		"body": [
			"const [submitted, setSubmitted] = useState(false);"
		],
		"description": "submitted state"
	},
	"useDialog warn": {
		"prefix": ["udw"],
		"body": [
			"const {setDialogWarn} = useDialog();"
		],
		"description": "use hook useDialog function - DialogWarning"
	},
	"useDialog show": {
		"prefix": ["uds"],
		"body": [
			"const {setDialogShow} = useDialog();"
		],
		"description": "use hook useDialog function - DialogShow"
	},
	"useDialog File": {
		"prefix": ["udf"],
		"body": [
			"const {setDialogFile} = useDialog();"
		],
		"description": "use hook useDialog function - DialogOpenFile"
	},
	"useDialog": {
		"prefix": ["ud","useDialog"],
		"body": [
			"const {setDialogWarn, setDialogShow} = useDialog();"
		],
		"description": "use hook useDialog function - DialogShow,DialogWarning"
	},
	"useDialog All": {
		"prefix": ["uda"],
		"body": [
			"const {setDialogWarn, setDialogShow, setDialogFile} = useDialog();"
		],
		"description": "use hook useDialog function"
	},
	"useDialog All - param": {
		"prefix": ["udap"],
		"body": [
			"const isDialog = useDialog();"
		],
		"description": "use hook useDialog function - params"
	},
	"useConfig": {
		"prefix": ["ucf","ucfb","useConfig"],
		"body": [
			"const {basePath} = useConfig();"
		],
		"description": "use hook useConfig function"
	},
	"useAPI": {
		"prefix": ["ua","useAPI"],
		"body": [
			"const [on$2]= useAPI($1.$2)",
			"$0"
		],
		"description": "use hook useAPI function"
	},
	"useAPIFile": {
		"prefix": ["uaf","useAPIFile"],
		"body": [
			"const [on$2]= useAPIFile($1.$2)",
			"$0"
		],
		"description": "use hook useAPIFile function"
	},
	"useMasterStore": {
		"prefix": ["ums","useMasterStore"],
		"body": [
			"const [${2}List]= useMasterStore($1)",
		],
		"description": "use hook useMasterStore function"
	},
	"onInputTextChange props" :{
		"prefix": ["itcp","onInputTextChange"],
		"body": [
			"const onInputTextChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { id: string; value?: string; checked?: boolean } }, key?: string) => {",
			"\tlet val = (e.target && e.target.value !== undefined)?e.target.value  :'';",
			"\tlet id = key && key !== '' ? key : (e.target && e.target.id) || '';\n",
			"\tprops.setData((preState)=>({",
			"\t\t...preState,",
			"\t\t[id]: val,",
			"\t}));",
			"};"
		],
		"description": "onInputTextChange function - props"

	},
	"onInputTextChange" :{
		"prefix": ["itc"],
		"body": [
			"const onInputTextChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { id: string; value?: string; checked?: boolean } }, key?: string) => {",
			"\tlet val = (e.target && e.target.value !== undefined)?e.target.value  :'';",
			"\tlet id = key && key !== '' ? key : (e.target && e.target.id) || '';\n",
			"\tsetData((preState)=>({",
			"\t\t...preState,",
			"\t\t[id]: val,",
			"\t}));",
			"};"
		],
		"description": "onInputTextChange function"
	}
}